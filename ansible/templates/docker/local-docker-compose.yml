version: '3'

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
  mysql:
    driver: ${VOLUMES_DRIVER}
  percona:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  phpmyadmin:
    driver: ${VOLUMES_DRIVER}

services:

### Workspace Utilities ##################################
    workspace:
      build:
        context: ./services/workspace
        args:
          - LARADOCK_PHP_VERSION=${PHP_VERSION}
          - LARADOCK_PHALCON_VERSION=${PHALCON_VERSION}
          - INSTALL_SUBVERSION=${WORKSPACE_INSTALL_SUBVERSION}
          - INSTALL_XDEBUG=${WORKSPACE_INSTALL_XDEBUG}
          - INSTALL_PHPDBG=${WORKSPACE_INSTALL_PHPDBG}
          - INSTALL_SSH2=${WORKSPACE_INSTALL_SSH2}
          - INSTALL_GMP=${WORKSPACE_INSTALL_GMP}
          - INSTALL_SOAP=${WORKSPACE_INSTALL_SOAP}
          - INSTALL_LDAP=${WORKSPACE_INSTALL_LDAP}
          - INSTALL_IMAP=${WORKSPACE_INSTALL_IMAP}
          - INSTALL_PHPREDIS=${WORKSPACE_INSTALL_PHPREDIS}
          - INSTALL_NODE=${WORKSPACE_INSTALL_NODE}
          - NPM_REGISTRY=${WORKSPACE_NPM_REGISTRY}
          - INSTALL_YARN=${WORKSPACE_INSTALL_YARN}
          - INSTALL_NPM_GULP=${WORKSPACE_INSTALL_NPM_GULP}
          - INSTALL_NPM_BOWER=${WORKSPACE_INSTALL_NPM_BOWER}
          - INSTALL_NPM_VUE_CLI=${WORKSPACE_INSTALL_NPM_VUE_CLI}
          - INSTALL_DRUSH=${WORKSPACE_INSTALL_DRUSH}
          - INSTALL_DRUPAL_CONSOLE=${WORKSPACE_INSTALL_DRUPAL_CONSOLE}
          - INSTALL_V8JS=${WORKSPACE_INSTALL_V8JS}
          - COMPOSER_GLOBAL_INSTALL=${WORKSPACE_COMPOSER_GLOBAL_INSTALL}
          - COMPOSER_REPO_PACKAGIST=${WORKSPACE_COMPOSER_REPO_PACKAGIST}
          - INSTALL_WORKSPACE_SSH=${WORKSPACE_INSTALL_WORKSPACE_SSH}
          - INSTALL_LARAVEL_ENVOY=${WORKSPACE_INSTALL_LARAVEL_ENVOY}
          - INSTALL_LARAVEL_INSTALLER=${WORKSPACE_INSTALL_LARAVEL_INSTALLER}
          - INSTALL_DEPLOYER=${WORKSPACE_INSTALL_DEPLOYER}
          - INSTALL_PRESTISSIMO=${WORKSPACE_INSTALL_PRESTISSIMO}
          - INSTALL_LINUXBREW=${WORKSPACE_INSTALL_LINUXBREW}
          - INSTALL_MC=${WORKSPACE_INSTALL_MC}
          - INSTALL_SYMFONY=${WORKSPACE_INSTALL_SYMFONY}
          - INSTALL_PYTHON=${WORKSPACE_INSTALL_PYTHON}
          - INSTALL_IMAGE_OPTIMIZERS=${WORKSPACE_INSTALL_IMAGE_OPTIMIZERS}
          - INSTALL_IMAGEMAGICK=${WORKSPACE_INSTALL_IMAGEMAGICK}
          - INSTALL_TERRAFORM=${WORKSPACE_INSTALL_TERRAFORM}
          - INSTALL_DUSK_DEPS=${WORKSPACE_INSTALL_DUSK_DEPS}
          - INSTALL_PHALCON=${WORKSPACE_INSTALL_PHALCON}
          - INSTALL_SWOOLE=${WORKSPACE_INSTALL_SWOOLE}
          - INSTALL_LIBPNG=${WORKSPACE_INSTALL_LIBPNG}
          - INSTALL_IONCUBE=${WORKSPACE_INSTALL_IONCUBE}
          - PUID=${WORKSPACE_PUID}
          - PGID=${WORKSPACE_PGID}
          - CHROME_DRIVER_VERSION=${WORKSPACE_CHROME_DRIVER_VERSION}
          - NODE_VERSION=${WORKSPACE_NODE_VERSION}
          - YARN_VERSION=${WORKSPACE_YARN_VERSION}
          - DRUSH_VERSION=${WORKSPACE_DRUSH_VERSION}
          - TZ=${WORKSPACE_TIMEZONE}
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      ports:
        - "${WORKSPACE_SSH_PORT}:22"
      tty: true
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
        - DOCKER_HOST=tcp://docker-in-docker:2375
      networks:
        - frontend
        - backend
      links:
        - docker-in-docker

### PHP-FPM ##############################################
    php-fpm:
      build:
        context: ./services/php-fpm
        args:
          - LARADOCK_PHP_VERSION=${PHP_VERSION}
          - LARADOCK_PHALCON_VERSION=${PHALCON_VERSION}
          - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
          - INSTALL_PHPDBG=${PHP_FPM_INSTALL_PHPDBG}
          - INSTALL_SSH2=${PHP_FPM_INSTALL_SSH2}
          - INSTALL_SOAP=${PHP_FPM_INSTALL_SOAP}
          - INSTALL_IMAP=${PHP_FPM_INSTALL_IMAP}
          - INSTALL_ZIP_ARCHIVE=${PHP_FPM_INSTALL_ZIP_ARCHIVE}
          - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
          - INSTALL_GMP=${PHP_FPM_INSTALL_GMP}
          - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
          - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
          - INSTALL_EXIF=${PHP_FPM_INSTALL_EXIF}
          - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
          - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
          - INSTALL_GHOSTSCRIPT=${PHP_FPM_INSTALL_GHOSTSCRIPT}
          - INSTALL_LDAP=${PHP_FPM_INSTALL_LDAP}
          - INSTALL_PHALCON=${PHP_FPM_INSTALL_PHALCON}
          - INSTALL_SWOOLE=${PHP_FPM_INSTALL_SWOOLE}
          - INSTALL_IMAGE_OPTIMIZERS=${PHP_FPM_INSTALL_IMAGE_OPTIMIZERS}
          - INSTALL_IMAGEMAGICK=${PHP_FPM_INSTALL_IMAGEMAGICK}
          - INSTALL_CALENDAR=${PHP_FPM_INSTALL_CALENDAR}
          - INSTALL_FAKETIME=${PHP_FPM_INSTALL_FAKETIME}
          - INSTALL_IONCUBE=${PHP_FPM_INSTALL_IONCUBE}
          - INSTALL_YAML=${INSTALL_YAML}
      volumes:
        - ./services/php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      expose:
        - "9000"
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
        - DOCKER_HOST=tcp://docker-in-docker:2375
        - FAKETIME=${PHP_FPM_FAKETIME}
      depends_on:
        - workspace
      networks:
        - backend
      links:
        - docker-in-docker
{% if enable_php_worker %}

### PHP Worker ############################################
    php-worker:
      build:
        context: ./services/php-worker
        args:
          - PHP_VERSION=${PHP_VERSION}
          - INSTALL_BCMATH=${PHP_WORKER_INSTALL_BCMATH}
          - INSTALL_SOAP=${PHP_WORKER_INSTALL_SOAP}
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
        - ./services/php-worker/supervisord.d:/etc/supervisord.d
      depends_on:
        - workspace
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      networks:
        - backend
{% endif %}
{% if webserver_type == 'nginx' %}

### NGINX Server #########################################
    nginx:
      build:
        context: ./services/nginx
        args:
          - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
          - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
          - CHANGE_SOURCE=${CHANGE_SOURCE}
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
        - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
        - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
        - ${NGINX_SSL_PATH}:/etc/nginx/ssl
      ports:
        - "${NGINX_HOST_HTTP_PORT}:80"
        - "${NGINX_HOST_HTTPS_PORT}:443"
      depends_on:
        - php-fpm
      networks:
        - frontend
        - backend
{% else %}

### Apache Server ########################################
    apache2:
      build:
        context: ./services/apache2
        args:
          - PHP_UPSTREAM_CONTAINER=${APACHE_PHP_UPSTREAM_CONTAINER}
          - PHP_UPSTREAM_PORT=${APACHE_PHP_UPSTREAM_PORT}
          - PHP_UPSTREAM_TIMEOUT=${APACHE_PHP_UPSTREAM_TIMEOUT}
          - DOCUMENT_ROOT=${APACHE_DOCUMENT_ROOT}
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
        - ${APACHE_HOST_LOG_PATH}:/var/log/apache2
        - ${APACHE_SITES_PATH}:/etc/apache2/sites-available
      ports:
        - "${APACHE_HOST_HTTP_PORT}:80"
        - "${APACHE_HOST_HTTPS_PORT}:443"
      depends_on:
        - php-fpm
      networks:
        - frontend
        - backend
{% endif %}

### MySQL ################################################
    mysql:
      build:
        context: ./services/mysql
        args:
          - MYSQL_VERSION=${MYSQL_VERSION}
      environment:
        - MYSQL_DATABASE=${MYSQL_DATABASE}
        - MYSQL_USER=${MYSQL_USER}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        - TZ=${WORKSPACE_TIMEZONE}
      volumes:
        - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
        - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
        - ${MYSQL_DUMP_FOLDER}:/home
      ports:
        - "${MYSQL_PORT}:3306"
      networks:
        - backend

### Percona ################################################
#    percona:
#      build:
#        context: ./services/percona
#      environment:
#        - MYSQL_DATABASE=${PERCONA_DATABASE}
#        - MYSQL_USER=${PERCONA_USER}
#        - MYSQL_PASSWORD=${PERCONA_PASSWORD}
#        - MYSQL_ROOT_PASSWORD=${PERCONA_ROOT_PASSWORD}
#      volumes:
#        - ${DATA_PATH_HOST}/percona:/var/lib/mysql
#        - ${PERCONA_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
#      ports:
#        - "${PERCONA_PORT}:3306"
#      networks:
#        - backend

### Redis ################################################
#    redis:
#      build: ./services/redis
#      volumes:
#        - ${DATA_PATH_HOST}/redis:/data
#      ports:
#        - "${REDIS_PORT}:6379"
#      networks:
#        - backend

### Beanstalkd ###########################################
#    beanstalkd:
#      build: ./services/beanstalkd
#      ports:
#        - "${BEANSTALKD_HOST_PORT}:11300"
#      privileged: true
#      depends_on:
#        - php-fpm
#      networks:
#        - backend

## Beanstalkd Console ###################################
#    beanstalkd-console:
#      build: ./services/beanstalkd-console
#      ports:
#        - "${BEANSTALKD_CONSOLE_HOST_PORT}:2080"
#      depends_on:
#        - beanstalkd
#      networks:
#        - backend

### phpMyAdmin ###########################################
#    phpmyadmin:
#      build: ./services/phpmyadmin
#      environment:
#        - PMA_ARBITRARY=1
#        - MYSQL_USER=${PMA_USER}
#        - MYSQL_PASSWORD=${PMA_PASSWORD}
#        - MYSQL_ROOT_PASSWORD=${PMA_ROOT_PASSWORD}
#      ports:
#        - "${PMA_PORT}:80"
#      depends_on:
#        - "${PMA_DB_ENGINE}"
#      networks:
#        - frontend
#        - backend

### Certbot #########################################
#    certbot:
#      build:
#        context: ./services/certbot
#      volumes:
#        - ./services/data/certbot/certs/:/var/certs
#        - ./services/certbot/letsencrypt/:/var/www/letsencrypt
#      environment:
#        - CN=fake.domain.com
#        - EMAIL="fake.email@gmail.com"
#      networks:
#        - frontend

## MailDev ##############################################
    maildev:
      build: ./services/maildev
      ports:
        - "${MAILDEV_HTTP_PORT}:80"
        - "${MAILDEV_SMTP_PORT}:25"
      networks:
        - frontend
        - backend

### Selenium ###############################################
#    selenium:
#      build: ./services/selenium
#      ports:
#        - "${SELENIUM_PORT}:4444"
#      volumes:
#        - /dev/shm:/dev/shm
#      networks:
#        - frontend

### Varnish ##########################################
#    proxy:
#      build: ./services/varnish
#      expose:
#        - ${VARNISH_PORT}
#      environment:
#        - VARNISH_CONFIG=${VARNISH_CONFIG}
#        - CACHE_SIZE=${VARNISH_PROXY1_CACHE_SIZE}
#        - VARNISHD_PARAMS=${VARNISHD_PARAMS}
#        - VARNISH_PORT=${VARNISH_PORT}
#        - BACKEND_HOST=${VARNISH_PROXY1_BACKEND_HOST}
#        - BACKEND_PORT=${VARNISH_BACKEND_PORT}
#        - VARNISH_SERVER=${VARNISH_PROXY1_SERVER}
#      links:
#        - workspace
#      networks:
#        - frontend
#
#    proxy2:
#      build: ./services/varnish
#      expose:
#        - ${VARNISH_PORT}
#      environment:
#        - VARNISH_CONFIG=${VARNISH_CONFIG}
#        - CACHE_SIZE=${VARNISH_PROXY2_CACHE_SIZE}
#        - VARNISHD_PARAMS=${VARNISHD_PARAMS}
#        - VARNISH_PORT=${VARNISH_PORT}
#        - BACKEND_HOST=${VARNISH_PROXY2_BACKEND_HOST}
#        - BACKEND_PORT=${VARNISH_BACKEND_PORT}
#        - VARNISH_SERVER=${VARNISH_PROXY2_SERVER}
#      links:
#        - workspace
#      networks:
#        - frontend

### HAProxy ####################################
#    haproxy:
#      build: ./services/haproxy
#      ports:
#        - "${HAPROXY_HOST_HTTP_PORT}:8085"
#      volumes:
#        - /var/run/docker.sock:/var/run/docker.sock
#      links:
#        - proxy
#        - proxy2

### Grafana ################################################
#    grafana:
#      build:
#        context: ./services/grafana
#      volumes:
#        - ${DATA_PATH_HOST}/grafana:/var/lib/grafana
#      ports:
#        - "${GRAFANA_PORT}:3000"
#      networks:
#        - backend

### Laravel Echo Server #######################################
#    laravel-echo-server:
#      build:
#        context: ./services/laravel-echo-server
#      volumes:
#        - ./services/laravel-echo-server/laravel-echo-server.json:/app/laravel-echo-server.json:ro
#      ports:
#        - "${LARAVEL_ECHO_SERVER_PORT}:6001"
#      links:
#        - redis
#      networks:
#        - frontend
#        - backend

### AWS EB-CLI ################################################
#    aws:
#      build:
#        context: ./services/aws
#      volumes:
#        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
#      depends_on:
#        - workspace
#      tty: true

### Portainer ################################################
#    portainer:
#      build:
#        context: ./services/portainer
#      volumes:
#        - ${DATA_PATH_HOST}/portainer_data:/data
#        - /var/run/docker.sock:/var/run/docker.sock
#      extra_hosts:
#        - "dockerhost:${DOCKER_HOST_IP}"
#      ports:
#        - 9010:9000
#      networks:
#        - backend

### Gitlab ################################################
#    gitlab:
#      build:
#        context: ./services/gitlab
#      environment:
#        GITLAB_OMNIBUS_CONFIG: |
#          external_url '${GITLAB_DOMAIN_NAME}'
#          redis['enable'] = false
#          nginx['listen_https'] = false
#          nginx['listen_port'] = 80
#          postgresql['enable'] = false
#          gitlab_rails['trusted_proxies'] = ['caddy','nginx','apache2']
#          gitlab_rails['redis_host'] = 'redis'
#          gitlab_rails['redis_database'] = 8
#          gitlab_rails['db_host'] = 'postgres'
#          gitlab_rails['db_username'] = 'laradock_gitlab'
#          gitlab_rails['db_password'] = 'laradock_gitlab'
#          gitlab_rails['db_database'] = 'laradock_gitlab'
#          gitlab_rails['initial_root_password'] = '${GITLAB_ROOT_PASSWORD}'
#          gitlab_rails['gitlab_shell_ssh_port'] = ${GITLAB_HOST_SSH_PORT}
#      volumes:
#        - ${DATA_PATH_HOST}/gitlab/config:/etc/gitlab
#        - ${DATA_PATH_HOST}/gitlab/data:/var/opt/gitlab
#        - ${GITLAB_HOST_LOG_PATH}:/var/log/gitlab
#      ports:
#        - "${GITLAB_HOST_HTTP_PORT}:80"
#        - "${GITLAB_HOST_HTTPS_PORT}:443"
#        - "${GITLAB_HOST_SSH_PORT}:22"
#      networks:
#        - backend
#      depends_on:
#        - redis
#        - postgres
#    gitlab-runner:
#      image: gitlab/gitlab-runner:latest
#      environment:
#        - CI_SERVER_URL=${GITLAB_DOMAIN_NAME}
#      volumes:
#        - ${DATA_PATH_HOST}/gitlab/runner:/etc/gitlab-runner
#        - /var/run/docker.sock:/var/run/docker.sock:rw
#      restart: always

### IPython #########################################
#    ipython-controller:
#      build:
#        context: ./services/ipython
#        dockerfile: Dockerfile.controller
#      networks:
#        - backend
#      extra_hosts:
#        - "laradock-ipython:${LARADOCK_IPYTHON_CONTROLLER_IP}"
#      ports:
#        - "33327-33338:33327-33338"
#    ipython-engine:
#      build:
#        context: ./services//ipython
#        dockerfile: Dockerfile.engine
#      networks:
#        - backend
#      extra_hosts:
#        - "laradock-ipython:${LARADOCK_IPYTHON_CONTROLLER_IP}"

### Docker-in-Docker ################################################
    docker-in-docker:
      image: docker:dind
      privileged: true
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      expose:
        - 2375
      networks:
        - backend

## NetData ################################################
#    netdata:
#      image: titpetric/netdata:latest
#      cap_add:
#      - SYS_PTRACE
#      volumes:
#      - /:/host:ro
#      ports:
#        - "${NETDATA_PORT}:19999"
#      networks:
#        - backend

### PHPRedisAdmin ################################################
#    phpredisadmin:
#      image: erikdubbelboer/phpredisadmin:latest
#      environment:
#        - ADMIN_USER=${REDIS_WEBUI_USERNAME}
#        - ADMIN_PASS=${REDIS_WEBUI_PASSWORD}
#        - REDIS_1_HOST=${REDIS_WEBUI_CONNECT_HOST}
#        - REDIS_1_PORT=${REDIS_WEBUI_CONNECT_PORT}
#      networks:
#        - backend
#      ports:
#        - "${REDIS_WEBUI_PORT}:80"
#      depends_on:
#        - redis

## Metabase #################################################
#    metabase:
#      image: metabase/metabase:latest
#      environment:
#        - MB_DB_FILE=/metabase-data/${METABASE_DB_FILE}
#      ports:
#        - ${METABASE_PORT}:3000
#      volumes:
#        - ${DATA_PATH_HOST}/metabase-data:/metabase-data
#      networks:
#        - backend

### IDE-THEIA ################################################
#    ide-theia:
#      build:
#        context: ./services/ide-theia
#      volumes:
#        - ${APP_CODE_PATH_HOST}:/home/project
#      ports:
#        - "${IDE_THEIA_PORT}:3000"
#      networks:
#        - backend

### IDE-WEBIDE ################################################
#    ide-webide:
#      build:
#        context: ./services/ide-webide
#      volumes:
#        - ${DATA_PATH_HOST}/ide/webide/ide.db:/root/.coding-ide/ide.db
#      ports:
#        - "${IDE_WEBIDE_PORT}:8080"
#      networks:
#        - backend

### IDE-CODIAD ################################################
#    ide-codiad:
#      build:
#        context: ./services/ide-codiad
#      environment:
#        - APP_CODE_PATH_CONTAINER=${APP_CODE_PATH_CONTAINER}
#        - TZ=${WORKSPACE_TIMEZONE}
#        - PGID=1000
#        - PUID=1000
#      volumes:
#        - /etc/localtime:/etc/localtime:ro
#        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
#        - ${DATA_PATH_HOST}/ide/codiad:/config
#      ports:
#        - "${IDE_CODIAD_PORT}:80"
#      networks:
#        - backend

### IDE-ICECODER ################################################
#    ide-icecoder:
#      build:
#        context: ./services/ide-icecoder
#      environment:
#        - DOCUMENT_ROOT=${APP_CODE_PATH_CONTAINER}
#        - TZ=${WORKSPACE_TIMEZONE}
#        - PGID=1000
#        - PUID=1000
#      volumes:
#        - /etc/localtime:/etc/localtime:ro
#        - ${APP_CODE_PATH_HOST}:/home/laradock/ICEcoder/dev
#      ports:
#        - "${IDE_ICECODER_PORT}:8080"
#      networks:
#        - backend

### DOCKER-REGISTRY ################################################
    docker-registry:
      build:
        context: ./services/docker-registry
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${DATA_PATH_HOST}/docker-registry:/var/lib/registry
      ports:
        - "${DOCKER_REGISTRY_PORT}:5000"
      networks:
        - backend

### DOCKER-WEB-UI ################################################
#    docker-web-ui:
#      build:
#        context: ./services/docker-web-ui
#      environment:
#        - TZ=${WORKSPACE_TIMEZONE}
#        - ENV_DOCKER_REGISTRY_HOST=${DOCKER_WEBUI_REGISTRY_HOST}
#        - ENV_DOCKER_REGISTRY_PORT=${DOCKER_WEBUI_REGISTRY_PORT}
#        - ENV_DOCKER_REGISTRY_USE_SSL=${DOCKER_REGISTRY_USE_SSL}
#        - ENV_MODE_BROWSE_ONLY=${DOCKER_REGISTRY_BROWSE_ONLY}
#      volumes:
#        - /etc/localtime:/etc/localtime:ro
#      ports:
#        - "${DOCKER_WEBUI_PORT}:80"
#      networks:
#        - frontend
#        - backend